from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, User as TgUser
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from typing import Optional, cast

from crud import (
    get_user,
    register_user,
    get_password_count,
    get_passwords
)
from keyboards import (
    main_menu,
    password_length_keyboard,
    passwords_pagination,
)
from callbacks import MessageManager  # –£–î–ê–õ–ï–ù –ù–ï–ù–£–ñ–ù–´–ô –ò–ú–ü–û–†–¢ show_main_menu
import logging

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext) -> None:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è /start –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    try:
        manager = MessageManager()
        await state.set_state(None)
        await state.update_data(manager=manager)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user: Optional[TgUser] = cast(TgUser, message.from_user)
        if not user:
            raise ValueError("–ù–µ –ø–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        existing_user = await get_user(user.id)
        if not existing_user:
            await register_user(user.id, user.username or "")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        welcome_msg = (
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!</b>\n\n"
            "üîê –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
        )
        msg = await message.answer(
            welcome_msg,
            reply_markup=main_menu(),  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å
            parse_mode=ParseMode.HTML
        )
        manager.track(msg)
        await state.update_data(manager=manager)

    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. /start")


@router.message(Command("help"))
async def help_command(message: Message) -> None:
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–º–æ—â–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π HTML-–ø–∞—Ä—Å–µ—Ä–∞"""
    help_text = (
        "<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üîê /generate - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è\n"
        "üìã /list - –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π\n"
        "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"
    )
    await message.answer(help_text, parse_mode=ParseMode.HTML)


@router.message(Command("list"))
async def list_passwords_command(message: Message, state: FSMContext) -> None:
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏"""
    try:
        data = await state.get_data()
        manager: Optional[MessageManager] = data.get('manager')

        if not manager:
            manager = MessageManager()
            await state.update_data(manager=manager)

        user_id: Optional[int] = message.from_user.id
        if not user_id:
            raise ValueError("–ù–µ –ø–æ–ª—É—á–µ–Ω user_id")

        passwords = await get_passwords(user_id)
        total: Optional[int] = await get_password_count(user_id)

        per_page = 15
        total_pages = max((cast(int, total) + per_page - 1) // per_page, 1)
        reply_markup = passwords_pagination(1, total_pages, passwords, per_page)

        msg = await message.answer(
            "üîë –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π:" if passwords else "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=reply_markup
        )
        manager.track(msg)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("‚õî –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")



@router.callback_query(F.data == "clear_all")
async def process_clear_all(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    try:
        data = await state.get_data()
        manager: Optional[MessageManager] = data.get('manager')
        user_id: Optional[int] = data.get('user_id')

        if not all([manager, user_id]):
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")

        await callback.message.edit_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await callback.message.edit_reply_markup(reply_markup=main_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await callback.message.edit_text("‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")


@router.message(Command("generate"))
async def generate_command(message: Message, state: FSMContext) -> None:
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è"""
    try:
        data = await state.get_data()
        manager: Optional[MessageManager] = data.get('manager')

        if not manager:
            manager = MessageManager()
            await state.update_data(manager=manager)

        msg = await message.answer(
            "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É:",
            reply_markup=password_length_keyboard()
        )
        manager.track(msg)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
import logging
from typing import cast
from aiogram import Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup

from decorators import message_cleaner, MessageManager
from crud import (
    save_password,
    get_passwords,
    get_password_count,
    delete_password,
    get_user,
    register_user
)
from keyboards import (
    main_menu,
    password_length_keyboard,
    passwords_pagination,
    after_generation_keyboard
)
from password import generate_password, estimate_crack_time
from security import calculate_password_strength, check_hibp

logger = logging.getLogger(__name__)
router = Router()

class HIBPCheckStates(StatesGroup):
    AWAITING_HIBP_PASSWORD = State()

@router.callback_query(F.data == "generate")
@message_cleaner
async def handle_generate(callback: CallbackQuery, state: FSMContext):
    manager = MessageManager()
    msg = await callback.message.answer(
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è:",
        reply_markup=password_length_keyboard()
    )
    manager.track(msg)
    await state.update_data(manager=manager)

@router.callback_query(F.data.startswith("length_"))
@message_cleaner
async def process_password(callback: CallbackQuery, state: FSMContext):
    length = int(callback.data.split("_")[1])
    password = generate_password(str(length))
    user_id = callback.from_user.id

    await state.update_data(last_length=length)

    if not await get_user(user_id):
        await register_user(user_id, callback.from_user.username or "")

    try:
        await save_password(user_id, password)
        await callback.message.edit_text(
            f"üîê –í–∞—à –ø–∞—Ä–æ–ª—å:\n<code>{password}</code>",
            parse_mode="HTML",
            reply_markup=after_generation_keyboard(password, length)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

@router.callback_query(F.data.startswith("copy_"))
async def copy_password(callback: CallbackQuery, bot: Bot):
    password = callback.data.split("_", 1)[1]
    try:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:\n<code>{password}</code>",
            parse_mode=ParseMode.HTML
        )
        await callback.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("delete_"))
@message_cleaner
async def delete_password_handler(callback: CallbackQuery, state: FSMContext):
    password_id = int(callback.data.split("_")[1])
    if await delete_password(password_id):
        await callback.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        await show_passwords_list(callback, state)
    else:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "pswd_list")
@message_cleaner
async def show_passwords_list(callback: CallbackQuery, state: FSMContext):
    user_id = cast(int, callback.from_user.id)
    try:
        total = await get_password_count(user_id)
        per_page = 15
        total_pages = max((total + per_page - 1) // per_page, 1)
        passwords = await get_passwords(user_id, 1, per_page)

        msg = await callback.message.answer(
            "üîë –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π:",
            reply_markup=passwords_pagination(1, total_pages, passwords, per_page)
        )
        data = await state.get_data()
        if 'manager' in data:
            data['manager'].track(msg)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚õî –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@router.callback_query(F.data == "main_menu")
@message_cleaner
async def return_to_main(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu()
        )
        await state.clear()
    except Exception as e:
        await callback.message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu()
        )

@router.callback_query(F.data.startswith("regenerate_"))
@message_cleaner
async def regenerate_password(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        length = data.get('last_length', 12)
        new_password = generate_password(str(length))
        user_id = callback.from_user.id

        await save_password(user_id, new_password)

        try:
            await callback.message.edit_text(
                f"üîê –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:\n<code>{new_password}</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=after_generation_keyboard(new_password, length)
            )
        except Exception:
            msg = await callback.message.answer(
                f"üîê –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:\n<code>{new_password}</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=after_generation_keyboard(new_password, length)
            )
            data = await state.get_data()
            if manager := data.get('manager'):
                manager.track(msg)

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("check_"))
@message_cleaner
async def handle_password_check(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        password = callback.data.split("_", 1)[1]
        report, recommendations = calculate_password_strength(password)
        recommendations_text = "\n".join(
            f"‚Ä¢ {rec}" for rec in recommendations) if recommendations else "‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"

        response = (
            f"üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª—è:\n<code>{password}</code>\n\n"
            f"üìà –≠–Ω—Ç—Ä–æ–ø–∏—è: {report['entropy']:.1f} –±–∏—Ç\n"
            f"‚öñÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {report['score']:.1f}/100\n\n"
            f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recommendations_text}"
        )

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        msg = await callback.message.answer(
            response,
            parse_mode=ParseMode.HTML,
            reply_markup=main_menu()
        )

        data = await state.get_data()
        manager = data.get('manager', MessageManager())
        manager.track(msg)
        await state.update_data(manager=manager)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", show_alert=True)
    finally:
        await state.clear()

@router.message(F.text)
@message_cleaner
async def handle_text_message(message: Message, state: FSMContext):
    try:
        if message.text.startswith("/"):
            await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            return

        password = message.text.strip()
        data = await state.get_data()
        manager = data.get("manager", MessageManager())

        report, recommendations = calculate_password_strength(password)
        recommendations_text = "\n".join(f"‚Ä¢ {rec}" for rec in recommendations)

        response = (
            f"üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª—è:\n<code>{password}</code>\n\n"
            f"üìà –≠–Ω—Ç—Ä–æ–ø–∏—è: {report.get('entropy', 0):.1f} –±–∏—Ç\n"
            f"‚öñÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {report.get('score', 0):.1f}/100\n\n"
            f"‚è≥ –í—Ä–µ–º—è –≤–∑–ª–æ–º–∞:\n"
            f"‚Ä¢ –û–Ω–ª–∞–π–Ω (Hydra HTTP): {estimate_crack_time(password, 'online')}\n"
            f"‚Ä¢ –û—Ñ—Ñ–ª–∞–π–Ω (MD5): {estimate_crack_time(password, 'md5')}\n\n"
            f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recommendations_text}"
        )

        msg = await message.answer(response, parse_mode=ParseMode.HTML)
        manager.track(msg)
        await state.update_data(manager=manager)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

@router.callback_query(F.data.startswith("check_password_"))
@message_cleaner
async def handle_existing_check(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        password = callback.data.split("check_password_", 1)[1]
        report, recommendations = calculate_password_strength(password)
        recommendations_text = "\n".join(f"‚Ä¢ {rec}" for rec in recommendations)

        response = (
            f"üîç <b>–ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è:</b>\n<code>{password}</code>\n\n"
            f"{report}\n\n"
            f"üìù <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{recommendations_text}"
        )

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        msg = await callback.message.answer(response, parse_mode=ParseMode.HTML, reply_markup=main_menu())
        data = await state.get_data()
        if manager := data.get('manager'):
            manager.track(msg)

        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)

@router.callback_query(F.data == "check_hibp")
@message_cleaner
async def start_hibp_check(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer("üîí –û—Ç–ø—Ä–∞–≤—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ HIBP...", show_alert=True)
        await callback.message.delete()

        await state.set_state(HIBPCheckStates.AWAITING_HIBP_PASSWORD)
        msg = await callback.message.answer(
            "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ HIBP:</b>\n"
            "‚ñ´Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚ñ´Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —É—Ç–µ—á–∫–∞ –≤ –±–∞–∑–µ Have I Been Pwned",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                ]
            )
        )

        manager = MessageManager()
        manager.track(msg)
        await state.update_data(manager=manager)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ HIBP: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", show_alert=True)

@router.message(HIBPCheckStates.AWAITING_HIBP_PASSWORD)
@message_cleaner
async def process_hibp_check(message: Message, state: FSMContext):
    try:
        password = message.text.strip()
        if len(password) < 8:
            msg = await message.answer(
                "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤!",
                reply_markup=main_menu()
            )
            manager = MessageManager()
            manager.track(msg)
            await state.update_data(manager=manager)
            await state.clear()
            return

        is_pwned, count = await check_hibp(password)
        response = (
            f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ HIBP:\n<code>{password}</code>\n\n"
            f"{'‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö!' if is_pwned else '‚úÖ –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö'}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–µ—á–µ–∫: {count if is_pwned else 0}"
        )

        msg = await message.answer(response, parse_mode=ParseMode.HTML, reply_markup=main_menu())
        manager = MessageManager()
        manager.track(msg)
        await state.update_data(manager=manager)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HIBP: {e}")
        msg = await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ HIBP", reply_markup=main_menu())
        manager = MessageManager()
        manager.track(msg)
        await state.update_data(manager=manager)
    finally:
        await state.clear()
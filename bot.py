import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import TOKEN
from database import create_pool, init_db
from commands import router as commands_router
from callbacks import router as callbacks_router
from password_check import router as password_check_router
from keyboards import main_menu
from decorators import message_cleaner, MessageManager
from hibp_checker import check_hibp  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è HIBP
hibp_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HIBP
class HIBPCheckStates(StatesGroup):
    AWAITING_HIBP_PASSWORD = State()


@hibp_router.callback_query(F.data == "check_hibp")
@message_cleaner
async def start_hibp_check(callback: CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ HIBP"""
    try:
        await callback.answer("üîí –û—Ç–ø—Ä–∞–≤—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ HIBP...", show_alert=True)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(HIBPCheckStates.AWAITING_HIBP_PASSWORD)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        msg = await callback.message.answer(
            "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ HIBP:</b>\n"
            "‚ñ´Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚ñ´Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Have I Been Pwned",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                ]
            )
        )

        manager = MessageManager()
        manager.track(msg)
        await state.update_data(manager=manager)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HIBP –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", show_alert=True)


@hibp_router.message(HIBPCheckStates.AWAITING_HIBP_PASSWORD)
@message_cleaner
async def process_hibp_check(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–µ—Ä–µ–∑ HIBP"""
    try:
        password = message.text.strip()

        if len(password) < 8:
            await message.answer(
                "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤!",
                reply_markup=main_menu()
            )
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ HIBP
        result = await check_hibp(password)

        response = (
            f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ HIBP:\n<code>{password}</code>\n\n"
            f"{result if result else '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ HIBP'}"
        )

        await message.answer(
            response,
            parse_mode=ParseMode.HTML,
            reply_markup=main_menu()
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HIBP: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ",
            reply_markup=main_menu()
        )
        await state.clear()


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    global bot
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await create_pool()
        logger.info("‚úÖ PostgreSQL connection pool initialized")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        bot = Bot(
            token=TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher()

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
        dp.include_router(commands_router)
        dp.include_router(password_check_router)
        dp.include_router(callbacks_router)
        dp.include_router(hibp_router)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
        await init_db()
        logger.info("‚úÖ Database schema initialized")

        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üöÄ Bot started in polling mode...")
        await dp.start_polling(bot)

    except Exception as e:
        logger.critical(f"üî• Critical error: {e}", exc_info=True)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        from database import _pool
        if _pool:
            await _pool.close()
            logger.info("üóÑ Connection pool closed")
        if 'bot' in locals():
            await bot.close()
            logger.info("ü§ñ Bot shutdown completed")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚õî Bot stopped by user")
import logging
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from decorators import message_cleaner, MessageManager
from keyboards import main_menu
from password import estimate_crack_time
from security import calculate_password_strength
import hashlib
import aiohttp

router = Router()
logger = logging.getLogger(__name__)

class PasswordCheckStates(StatesGroup):
    AWAITING_CUSTOM_PASSWORD = State()
    AWAITING_HIBP_PASSWORD = State()

@router.callback_query(F.data == "check_custom")
@message_cleaner
async def start_custom_check(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer("üîí –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...", show_alert=True)
        await callback.message.delete()
        await state.set_state(PasswordCheckStates.AWAITING_CUSTOM_PASSWORD)
        msg = await callback.message.answer(
            "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n"
            "‚ñ´Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚ñ´Ô∏è –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: A-Z, a-z, 0-9, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                ]
            )
        )
        manager = MessageManager()
        manager.track(msg)
        await state.update_data(manager=manager)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)

@router.message(PasswordCheckStates.AWAITING_CUSTOM_PASSWORD)
@message_cleaner
async def process_custom_check(message: Message, state: FSMContext):
    try:
        password = message.text.strip()
        if len(password) < 8:
            await message.answer(
                "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤",
                reply_markup=main_menu()
            )
            await state.clear()
            return

        report, recommendations = calculate_password_strength(password)
        recommendations_text = "\n".join(
            f"‚Ä¢ {rec}" for rec in recommendations) if recommendations else "‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"

        online_time = estimate_crack_time(password, mode='online')
        offline_md5_time = estimate_crack_time(password, mode='md5')

        response = (
            f"üîç <b>–ê–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è:</b>\n<code>{password}</code>\n\n"
            f"üìà –≠–Ω—Ç—Ä–æ–ø–∏—è: {report['entropy']:.1f} –±–∏—Ç\n"
            f"‚öñÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {report['score']:.1f}/100\n\n"
            f"‚è≥ <b>–í—Ä–µ–º—è –≤–∑–ª–æ–º–∞ –ø—Ä–∏ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏:</b>\n"
            f"‚Ä¢ –û–Ω–ª–∞–π–Ω (Hydra HTTP): {online_time}\n"
            f"‚Ä¢ –û—Ñ—Ñ–ª–∞–π–Ω (MD5): {offline_md5_time}\n\n"
            f"üìù <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{recommendations_text}"
        )

        await message.answer(response, parse_mode=ParseMode.HTML, reply_markup=main_menu())
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞—Ä–æ–ª—è", reply_markup=main_menu())
        await state.clear()

@router.callback_query(F.data == "check_hibp")
@message_cleaner
async def start_hibp_check(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer("üîí –û—Ç–ø—Ä–∞–≤—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ HIBP...", show_alert=True)
        await callback.message.delete()
        await state.set_state(PasswordCheckStates.AWAITING_HIBP_PASSWORD)
        msg = await callback.message.answer(
            "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ HIBP:</b>\n"
            "‚ñ´Ô∏è –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–µ—Ä–µ–∑ SHA-1 —Ö–µ—à\n"
            "‚ñ´Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 8 —Å–∏–º–≤–æ–ª–æ–≤",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                ]
            )
        )
        manager = MessageManager()
        manager.track(msg)
        await state.update_data(manager=manager)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ HIBP: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)

@router.message(PasswordCheckStates.AWAITING_HIBP_PASSWORD)
@message_cleaner
async def process_hibp_check(message: Message, state: FSMContext):
    try:
        password = message.text.strip()
        if len(password) < 8:
            await message.answer(
                "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤",
                reply_markup=main_menu()
            )
            await state.clear()
            return

        sha1_hash = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
        prefix = sha1_hash[:5]
        suffix = sha1_hash[5:]

        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.pwnedpasswords.com/range/{prefix}") as response:
                if response.status != 200:
                    raise Exception(f"HIBP API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status}")
                hashes = await response.text()

        found = False
        count = 0
        for line in hashes.splitlines():
            if not line.strip():
                continue
            try:
                hash_suffix, occurrences = line.split(':', 1)
                if hash_suffix.strip() == suffix:
                    found = True
                    count = int(occurrences.strip())
                    break
            except ValueError as e:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ HIBP: {line} - {e}")
                continue

        if found:
            response = (
                f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –≤ HIBP:\n<code>{password}</code>\n\n"
                f"‚ö†Ô∏è –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –±—ã–ª —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω!\n"
                f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω {count} —Ä–∞–∑(–∞) –≤ —É—Ç–µ—á–∫–∞—Ö\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!"
            )
        else:
            response = (
                f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –≤ HIBP:\n<code>{password}</code>\n\n"
                f"‚úÖ –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö"
            )

        await message.answer(response, parse_mode=ParseMode.HTML, reply_markup=main_menu())
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HIBP: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ HIBP",
            reply_markup=main_menu()
        )
        await state.clear()
